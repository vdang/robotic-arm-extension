<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="ZTg+%Z6}AT8~O%[[LuDA" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="PrC[kaMqng0]*;wG5Qsv" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace robotic_arm_extension {" line1="    let claw_angle_min = 0" line2="    let claw_angle_max = 0" line3="    let claw_angle_default = 0" line4="    let claw_angle = 0" line5="    let mid_angle = 0" line6="    let mid_angle_default = 0" line7="    let top_angle = 0" line8="    let top_angle_default = 0" line9="    let base_angle = 0" line10="    let base_angle_default = 0" line11="    let top_angle_max = 0" line12="    let top_angle_min = 0" line13="    let mid_angle_min = 0" line14="    let mid_angle_max = 0" line15="    let base_angle_min = 0" line16="    let base_angle_max = 0" line17="    function put_claw_in_default_position () {" line18="        claw_angle_min = 60" line19="        claw_angle_max = 160" line20="        claw_angle_default = 90" line21="        claw_angle = claw_angle_default" line22="        pins.servoWritePin(AnalogPin.P8, claw_angle)" line23="    }" line24="    //% block" line25="    export function reset_robotic_arm () {" line26="        while (mid_angle &lt; mid_angle_default) {" line27="            mid_angle += 5" line28="            pins.servoWritePin(AnalogPin.P2, mid_angle)" line29="            basic.pause(200)" line30="        }" line31="        put_middle_arm_in_default_position()" line32="        basic.pause(200)" line33="        while (Math.abs(top_angle - top_angle_default) &gt; 5) {" line34="            if (top_angle &gt;= top_angle_default) {" line35="                top_angle += -5" line36="            } else {" line37="                top_angle += 5" line38="            }" line39="            pins.servoWritePin(AnalogPin.P1, top_angle)" line40="            basic.pause(200)" line41="        }" line42="        put_top_arm_in_default_position()" line43="        basic.pause(200)" line44="        while (Math.abs(base_angle - base_angle_default) &gt; 5) {" line45="            if (base_angle &gt;= base_angle_default) {" line46="                base_angle += -5" line47="            } else {" line48="                base_angle += 5" line49="            }" line50="            pins.servoWritePin(AnalogPin.P9, base_angle)" line51="            basic.pause(200)" line52="        }" line53="        put_base_in_default_position()" line54="        basic.pause(200)" line55="        put_claw_in_default_position()" line56="    }" line57="    //% block" line58="    export function lower_top_arm(angle_step: number = 3) {" line59="        top_angle = Math.min(top_angle + angle_step, top_angle_max)" line60="        pins.servoWritePin(AnalogPin.P1, top_angle)" line61="    }" line62="    function put_top_arm_in_default_position () {" line63="        top_angle_min = 10" line64="        top_angle_max = 180" line65="        top_angle_default = 90" line66="        top_angle = top_angle_default" line67="        pins.servoWritePin(AnalogPin.P1, top_angle)" line68="    }" line69="    function put_middle_arm_in_default_position () {" line70="        mid_angle_min = 90" line71="        mid_angle_max = 170" line72="        mid_angle_default = 170" line73="        mid_angle = mid_angle_default" line74="        pins.servoWritePin(AnalogPin.P2, mid_angle)" line75="    }" line76="    //% block" line77="    export function lift_middle_arm(angle_step: number = 3) {" line78="        mid_angle = Math.min(mid_angle + angle_step, mid_angle_max)" line79="        pins.servoWritePin(AnalogPin.P2, mid_angle)" line80="    }" line81="    function put_base_in_default_position () {" line82="        base_angle_min = 10" line83="        base_angle_max = 170" line84="        base_angle_default = 100" line85="        base_angle = base_angle_default" line86="        pins.servoWritePin(AnalogPin.P9, base_angle)" line87="    }" line88="    //% block" line89="    export function put_robotic_arm_in_starting_position () {" line90="        put_claw_in_default_position()" line91="        basic.pause(500)" line92="        put_top_arm_in_default_position()" line93="        basic.pause(500)" line94="        put_middle_arm_in_default_position()" line95="        basic.pause(500)" line96="        put_base_in_default_position()" line97="    }" line98="    //% block" line99="    export function lower_middle_arm(angle_step: number = 3) {" line100="        mid_angle = Math.max(mid_angle - angle_step, mid_angle_min)" line101="        pins.servoWritePin(AnalogPin.P2, mid_angle)" line102="    }" line103="    //% block" line104="    export function rotate_base_right(angle_step: number = 3) {" line105="        base_angle = Math.max(base_angle - angle_step, base_angle_min)" line106="        pins.servoWritePin(AnalogPin.P9, base_angle)" line107="    }" line108="    //% block" line109="    export function close_claw(angle_step: number = 10) {" line110="        claw_angle = Math.min(claw_angle + angle_step, claw_angle_max)" line111="        pins.servoWritePin(AnalogPin.P8, claw_angle)" line112="    }" line113="    //% block" line114="    export function rotate_base_left(angle_step: number = 3) {" line115="        base_angle = Math.min(base_angle + angle_step, base_angle_max)" line116="        pins.servoWritePin(AnalogPin.P9, base_angle)" line117="    }" line118="    //% block" line119="    export function lift_top_arm (angle_step: number = 3) {" line120="        top_angle = Math.max(top_angle - angle_step, top_angle_min)" line121="        pins.servoWritePin(AnalogPin.P1, top_angle)" line122="    }" line123="    //% block" line124="    export function open_claw (angle_step: number = 10) {" line125="        claw_angle = Math.max(claw_angle - angle_step, claw_angle_min)" line126="        pins.servoWritePin(AnalogPin.P8, claw_angle)" line127="    }" line128="}" numlines="129"></mutation></block></statement></block></xml>