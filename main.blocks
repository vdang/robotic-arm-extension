<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="1YB4)l8e?=xyxF2Fr;Uw" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="hyD,kN=!$9A}XzhzyMfp" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace robotic_arm_extension {" line1="    let claw_angle_min = 0" line2="    let claw_angle_max = 0" line3="    let claw_angle_default = 0" line4="    let claw_angle = 0" line5="    let mid_angle = 0" line6="    let mid_angle_default = 0" line7="    let top_angle = 0" line8="    let top_angle_default = 0" line9="    let base_angle = 0" line10="    let base_angle_default = 0" line11="    let top_angle_max = 0" line12="    let top_angle_min = 0" line13="    let mid_angle_min = 0" line14="    let mid_angle_max = 0" line15="    let base_angle_min = 0" line16="    let base_angle_max = 0" line17="    " line18="    //% block" line19="    export function putRoboticArmInStartingPosition() {" line20="        put_claw_in_default_position()" line21="        basic.pause(500)" line22="        put_top_arm_in_default_position()" line23="        basic.pause(500)" line24="        put_middle_arm_in_default_position()" line25="        basic.pause(500)" line26="        put_base_in_default_position()" line27="    }" line28="    //% block" line29="    export function resetRoboticArm () {" line30="        while (mid_angle &lt; mid_angle_default) {" line31="            mid_angle += 5" line32="            pins.servoWritePin(AnalogPin.P2, mid_angle)" line33="            basic.pause(200)" line34="        }" line35="        put_middle_arm_in_default_position()" line36="        basic.pause(200)" line37="        while (Math.abs(top_angle - top_angle_default) &gt; 5) {" line38="            if (top_angle &gt;= top_angle_default) {" line39="                top_angle += -5" line40="            } else {" line41="                top_angle += 5" line42="            }" line43="            pins.servoWritePin(AnalogPin.P1, top_angle)" line44="            basic.pause(200)" line45="        }" line46="        put_top_arm_in_default_position()" line47="        basic.pause(200)" line48="        while (Math.abs(base_angle - base_angle_default) &gt; 5) {" line49="            if (base_angle &gt;= base_angle_default) {" line50="                base_angle += -5" line51="            } else {" line52="                base_angle += 5" line53="            }" line54="            pins.servoWritePin(AnalogPin.P9, base_angle)" line55="            basic.pause(200)" line56="        }" line57="        put_base_in_default_position()" line58="        basic.pause(200)" line59="        put_claw_in_default_position()" line60="    }" line61="    //% block" line62="    //% angle_step.defl=10" line63="    export function openClaw(angle_step: number = 10) {" line64="        claw_angle = Math.max(claw_angle - angle_step, claw_angle_min)" line65="        pins.servoWritePin(AnalogPin.P8, claw_angle)" line66="    }" line67="    //% block" line68="    //% angle_step.defl=10" line69="    export function closeClaw(angle_step: number = 10) {" line70="        claw_angle = Math.min(claw_angle + angle_step, claw_angle_max)" line71="        pins.servoWritePin(AnalogPin.P8, claw_angle)" line72="    }" line73="    //% block" line74="    //% angle_step.defl=3" line75="    export function rotateBaseLeft(angle_step: number = 3) {" line76="        base_angle = Math.min(base_angle + angle_step, base_angle_max)" line77="        pins.servoWritePin(AnalogPin.P9, base_angle)" line78="    }" line79="    //% block" line80="    //% angle_step.defl=3" line81="    export function rotateBaseRight(angle_step: number = 3) {" line82="        base_angle = Math.max(base_angle - angle_step, base_angle_min)" line83="        pins.servoWritePin(AnalogPin.P9, base_angle)" line84="    }" line85="    //% block" line86="    //% angle_step.defl=3" line87="    export function liftTopArm (angle_step: number = 3) {" line88="        top_angle = Math.max(top_angle - angle_step, top_angle_min)" line89="        pins.servoWritePin(AnalogPin.P1, top_angle)" line90="    }" line91="    //% block" line92="    //% angle_step.defl=3" line93="    export function lowerTopArm(angle_step: number = 3) {" line94="        top_angle = Math.min(top_angle + angle_step, top_angle_max)" line95="        pins.servoWritePin(AnalogPin.P1, top_angle)" line96="    }" line97="    //% block" line98="    //% angle_step.defl=3" line99="    export function liftMiddleArm(angle_step: number = 3) {" line100="        mid_angle = Math.min(mid_angle + angle_step, mid_angle_max)" line101="        pins.servoWritePin(AnalogPin.P2, mid_angle)" line102="    }" line103="    //% block" line104="    //% angle_step.defl=3" line105="    export function lowerMiddleArm(angle_step: number = 3) {" line106="        mid_angle = Math.max(mid_angle - angle_step, mid_angle_min)" line107="        pins.servoWritePin(AnalogPin.P2, mid_angle)" line108="    }" line109="" line110="    function put_claw_in_default_position() {" line111="        claw_angle_min = 60" line112="        claw_angle_max = 160" line113="        claw_angle_default = 90" line114="        claw_angle = claw_angle_default" line115="        pins.servoWritePin(AnalogPin.P8, claw_angle)" line116="    }" line117="    function put_top_arm_in_default_position() {" line118="        top_angle_min = 10" line119="        top_angle_max = 180" line120="        top_angle_default = 90" line121="        top_angle = top_angle_default" line122="        pins.servoWritePin(AnalogPin.P1, top_angle)" line123="    }" line124="    function put_middle_arm_in_default_position() {" line125="        mid_angle_min = 90" line126="        mid_angle_max = 170" line127="        mid_angle_default = 170" line128="        mid_angle = mid_angle_default" line129="        pins.servoWritePin(AnalogPin.P2, mid_angle)" line130="    }" line131="    function put_base_in_default_position() {" line132="        base_angle_min = 10" line133="        base_angle_max = 170" line134="        base_angle_default = 100" line135="        base_angle = base_angle_default" line136="        pins.servoWritePin(AnalogPin.P9, base_angle)" line137="    }" line138="}" numlines="139"></mutation></block></statement></block></xml>